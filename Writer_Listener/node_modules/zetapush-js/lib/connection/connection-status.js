"use strict";

exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Define life cycle connection methods
 * @access public
 */
var ConnectionStatusListener = exports.ConnectionStatusListener = function () {
  function ConnectionStatusListener() {
    _classCallCheck(this, ConnectionStatusListener);
  }

  _createClass(ConnectionStatusListener, [{
    key: "onConnectionBroken",

    /**
     * Callback fired when connection is broken
     */
    value: function onConnectionBroken() {}
    /**
     * Callback fired when connection is closed
     */

  }, {
    key: "onConnectionClosed",
    value: function onConnectionClosed() {}
    /**
     * Callback fired when connection is established
     */

  }, {
    key: "onConnectionEstablished",
    value: function onConnectionEstablished() {}
    /**
     * Callback fired when an error occurs in connection to server step
     * @param {Object} failure
     */

  }, {
    key: "onConnectionToServerFail",
    value: function onConnectionToServerFail(failure) {}
    /**
     * Callback fired when negociation with server failed
     * @param {Object} failure
     */

  }, {
    key: "onNegotiationFailed",
    value: function onNegotiationFailed(failure) {}
    /**
     * Callback no server url avaibale
     */

  }, {
    key: "onNoServerUrlAvailable",
    value: function onNoServerUrlAvailable() {}
    /**
    * Callback fired when connection will close
    */

  }, {
    key: "onConnectionWillClose",
    value: function onConnectionWillClose() {}
    /**
     * Callback fired when an error occurs in handshake step
     * @param {Object} failure
     */

  }, {
    key: "onFailedHandshake",
    value: function onFailedHandshake(failure) {}
    /**
     * Callback fired when a message is lost
     */

  }, {
    key: "onMessageLost",
    value: function onMessageLost() {}
    /**
     * Callback fired when handshake step succeed
     * @param {Object} authentication
     */

  }, {
    key: "onSuccessfulHandshake",
    value: function onSuccessfulHandshake(authentication) {}
  }]);

  return ConnectionStatusListener;
}();